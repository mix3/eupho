// Code generated by protoc-gen-go.
// source: eupho.proto
// DO NOT EDIT!

/*
Package eupho is a generated protocol buffer package.

It is generated from these files:
	eupho.proto

It has these top-level messages:
	GetTestRequest
	GetTestResponse
	ResultRequest
	ResultResponse
*/
package eupho

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetTestRequest struct {
	Submitted bool     `protobuf:"varint,1,opt,name=submitted" json:"submitted,omitempty"`
	TestFiles []string `protobuf:"bytes,2,rep,name=test_files" json:"test_files,omitempty"`
}

func (m *GetTestRequest) Reset()                    { *m = GetTestRequest{} }
func (m *GetTestRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTestRequest) ProtoMessage()               {}
func (*GetTestRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GetTestRequest) GetSubmitted() bool {
	if m != nil {
		return m.Submitted
	}
	return false
}

func (m *GetTestRequest) GetTestFiles() []string {
	if m != nil {
		return m.TestFiles
	}
	return nil
}

type GetTestResponse struct {
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
}

func (m *GetTestResponse) Reset()                    { *m = GetTestResponse{} }
func (m *GetTestResponse) String() string            { return proto.CompactTextString(m) }
func (*GetTestResponse) ProtoMessage()               {}
func (*GetTestResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetTestResponse) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type ResultRequest struct {
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Json string `protobuf:"bytes,2,opt,name=json" json:"json,omitempty"`
}

func (m *ResultRequest) Reset()                    { *m = ResultRequest{} }
func (m *ResultRequest) String() string            { return proto.CompactTextString(m) }
func (*ResultRequest) ProtoMessage()               {}
func (*ResultRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ResultRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *ResultRequest) GetJson() string {
	if m != nil {
		return m.Json
	}
	return ""
}

type ResultResponse struct {
}

func (m *ResultResponse) Reset()                    { *m = ResultResponse{} }
func (m *ResultResponse) String() string            { return proto.CompactTextString(m) }
func (*ResultResponse) ProtoMessage()               {}
func (*ResultResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*GetTestRequest)(nil), "eupho.GetTestRequest")
	proto.RegisterType((*GetTestResponse)(nil), "eupho.GetTestResponse")
	proto.RegisterType((*ResultRequest)(nil), "eupho.ResultRequest")
	proto.RegisterType((*ResultResponse)(nil), "eupho.ResultResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Eupho service

type EuphoClient interface {
	GetTest(ctx context.Context, in *GetTestRequest, opts ...grpc.CallOption) (*GetTestResponse, error)
	Result(ctx context.Context, in *ResultRequest, opts ...grpc.CallOption) (*ResultResponse, error)
}

type euphoClient struct {
	cc *grpc.ClientConn
}

func NewEuphoClient(cc *grpc.ClientConn) EuphoClient {
	return &euphoClient{cc}
}

func (c *euphoClient) GetTest(ctx context.Context, in *GetTestRequest, opts ...grpc.CallOption) (*GetTestResponse, error) {
	out := new(GetTestResponse)
	err := grpc.Invoke(ctx, "/eupho.Eupho/GetTest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *euphoClient) Result(ctx context.Context, in *ResultRequest, opts ...grpc.CallOption) (*ResultResponse, error) {
	out := new(ResultResponse)
	err := grpc.Invoke(ctx, "/eupho.Eupho/Result", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Eupho service

type EuphoServer interface {
	GetTest(context.Context, *GetTestRequest) (*GetTestResponse, error)
	Result(context.Context, *ResultRequest) (*ResultResponse, error)
}

func RegisterEuphoServer(s *grpc.Server, srv EuphoServer) {
	s.RegisterService(&_Eupho_serviceDesc, srv)
}

func _Eupho_GetTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EuphoServer).GetTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eupho.Eupho/GetTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EuphoServer).GetTest(ctx, req.(*GetTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Eupho_Result_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EuphoServer).Result(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eupho.Eupho/Result",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EuphoServer).Result(ctx, req.(*ResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Eupho_serviceDesc = grpc.ServiceDesc{
	ServiceName: "eupho.Eupho",
	HandlerType: (*EuphoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTest",
			Handler:    _Eupho_GetTest_Handler,
		},
		{
			MethodName: "Result",
			Handler:    _Eupho_Result_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eupho.proto",
}

func init() { proto.RegisterFile("eupho.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 204 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0x2d, 0x2d, 0xc8,
	0xc8, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x73, 0x94, 0xcc, 0xb9, 0xf8, 0xdc,
	0x53, 0x4b, 0x42, 0x52, 0x8b, 0x4b, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x04, 0xb9,
	0x38, 0x8b, 0x4b, 0x93, 0x72, 0x33, 0x4b, 0x4a, 0x52, 0x53, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38,
	0x84, 0x84, 0xb8, 0xb8, 0x4a, 0x52, 0x8b, 0x4b, 0xe2, 0xd3, 0x32, 0x73, 0x52, 0x8b, 0x25, 0x98,
	0x14, 0x98, 0x35, 0x38, 0x95, 0xe4, 0xb9, 0xf8, 0xe1, 0x1a, 0x8b, 0x0b, 0xf2, 0xf3, 0x8a, 0x53,
	0x85, 0x78, 0xb8, 0x58, 0x0a, 0x12, 0x4b, 0x32, 0xc0, 0x9a, 0x38, 0x95, 0xb4, 0xb9, 0x78, 0x83,
	0x52, 0x8b, 0x4b, 0x73, 0xe0, 0x06, 0xa3, 0x48, 0x83, 0x78, 0x59, 0xc5, 0xf9, 0x79, 0x12, 0x4c,
	0x60, 0xc5, 0x02, 0x5c, 0x7c, 0x30, 0xc5, 0x10, 0xc3, 0x8c, 0x6a, 0xb8, 0x58, 0x5d, 0x41, 0x2e,
	0x14, 0xb2, 0xe2, 0x62, 0x87, 0x5a, 0x24, 0x24, 0xaa, 0x07, 0xf1, 0x01, 0xaa, 0x8b, 0xa5, 0xc4,
	0xd0, 0x85, 0x21, 0x46, 0x28, 0x31, 0x08, 0x99, 0x73, 0xb1, 0x41, 0x8c, 0x15, 0x12, 0x81, 0xaa,
	0x41, 0x71, 0x92, 0x94, 0x28, 0x9a, 0x28, 0x4c, 0x63, 0x12, 0x1b, 0x38, 0x90, 0x8c, 0x01, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x9a, 0x72, 0x04, 0xbb, 0x33, 0x01, 0x00, 0x00,
}
